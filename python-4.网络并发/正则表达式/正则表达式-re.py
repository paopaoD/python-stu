# @Project   : Python
# @File      : 正则表达式-re.py
# @Auther    : 等到秋叶金黄
# @Time      : 2022/7/2, 13:45
#

'''
    re模块
        定义：即文本的高级匹配模式，提供搜索，替换功能。
                其本质是由一些列字符和特殊符号构成的字串，这个字串即正则表达式

        原理：通过普通字符和有特定含义的字符，来组成字符串，用以描绘一定的字符串规则
                比如：位置，重复等 来表达某类特定的字符串，进行匹配

'''
# 示例：
import re

s = "2006年，因获得《雅虎搜星》比赛冯小刚组冠军而进入演艺圈；" \
    "同年，在冯小刚执导的《跪族篇》中担任女主角。" \
    "2011年，因在古装剧《新还珠格格》中饰演晴儿被更多观众认识。" \
    "2013年，凭借古装剧《陆贞传奇》收获更多关注。" \
    "2014年，在第10届中国金鹰电视艺术节投票活动中被选为“金鹰女神”；" \
    "同年，她还凭借爱情剧《杉杉来了》获得了第5届国剧盛典内地最具人气女演员奖；" \
    "并成立了海润传媒赵丽颖工作室。"


result = re.findall(r"《\w+?》",s)

print(result)


# 字符组（[]）允许匹配一组可能出现的字符。
s = re.findall('[0-9]',"123asdWERWE")
print(s)
s = re.findall('[0-9a-z]',"123asdWERWE")
print(s)
s = re.findall('[0-9a-zA-Z]',"123asdWERWE")
print(s)


# 取反    可以通过在字符数组开头使用 ^ 字符实现取反操作，
#           从而可以反转一个字符组（意味着会匹配任何指定字符之外的所有字符）。
s = re.findall('[^0-9]',"123asdWERWE")
print(s)    # ['a', 's', 'd', 'W', 'E', 'R', 'W', 'E']

s = re.findall('[^WE]',"123asdWERWE")
print(s)    # ['1', '2', '3', 'a', 's', 'd', 'R']



# .字符代表匹配任何单个字符，它只能出现在方括号以外。
s = re.findall("ab.d","abcd,abdd,abmd")
print(s)



# \w 可以与任意单词字符匹配。   任意单词字符表示 [A-Z]、 [a-z]、[0-9]、_
s = re.findall("\w","326werSDF_")
print(s)


# \d 可以与任意数字匹配。
s = re.findall("\d","326werSDF_")
print(s)    # ['3', '2', '6']


# 匹配空白  \s快捷方式可以匹配空白字符，比如空格，tab、换行等。
s = re.findall("\S","  ,code j")
print(s)    # [',', 'c', 'o', 'd', 'e', 'j']



#   速写  还可以使用两个速写字符指定常见的重复情况
#       +等价于{1,}，*等价于{0,}。


# 元字符 *  匹配前面的字符出现0次或多次  等价于{0,} 表示0个以上
s = re.findall("a\d*","a,a123,123456789,abcde")
print(s)    # ['a', 'a123', 'a']

s = re.findall("wo*","woooooooo~~w!")
print(s)    # ['woooooooo', 'w']


# 元字符 +  匹配前面的字符出现1次或多次  等价于{0,} 表示1个以上
s = re.findall("[A-Z][a-z]+","How are you?Fine,JAME")
print(s)    # ['How', 'Fine', 'Jame']

s = re.findall("[A-Z][a-z]+","How are you?Fine,J")
print(s)    # ['How', 'Fine']


# ? 符号指定一个字符、字符组或其他基本单元可选，这意味该字符出现零次或一次。
s = re.findall("honou?r","honour,honor")
print(s)    # ['honour', 'honor']

s = re.findall("-?[0-9]+","15 -58 -8 78")
print(s)    # ['15', '-58', '-8', '78']


### 练习：匹配"Port-9 Error #404# %@STD"
s = re.findall("[^ ]+","Port-9 Error #404# %@STD")
print(s)    # ['Port-9', 'Error', '#404#', '%@STD']







# 重复    在一个字符组后加上{N} 就可以表示在它之前的字符组出现N次。
s = re.findall("\d{3}-\d{5}","010-88480,030-98788")
print(s)


# 重复区间，语法：{M,N}，M是下界而N是上界。
s = re.findall("\d{3,4}","1234,123")
print(s)    # ['1234', '123']

# \d{3,4} 既可以匹配3个数字也可以匹配4个数字，不过当有4个数字的时候，优先匹配的是4个数字，
#   这是因为正则表达式默认是贪婪模式，即尽可能的匹配更多字符，而要使用非贪婪模式，我们要在
#       表达式后面加上 ?号。

s = re.findall("\d{3,4}?","1234,123")
print(s)    # ['123', '123']


#  开闭区间     闭区间不写即可表示匹配一个或无数个。
s = re.findall("\d{1,}?","12,1234,123456789")
print(s)













































